/*! fly - v1.0.0 - 2014-12-22
* https://github.com/amibug/fly
* Copyright (c) 2014 wuyuedong; Licensed MIT */
(function ($) {
    $.fly = function (element, options) {
      // 榛樿鍊�
      var defaults = {
        version: '1.0.0',
        autoPlay: true,
        vertex_Rtop: 20, // 榛樿椤剁偣楂樺害top鍊�
        speed: 1.2,
        start: {}, // top, left, width, height
        end: {},
        onEnd: $.noop
      };
  
      var self = this,
        $element = $(element);
  
      /**
       * 鍒濆鍖栫粍浠讹紝new鐨勬椂鍊欏嵆璋冪敤
       */
      self.init = function (options) {
        this.setOptions(options);
        !!this.settings.autoPlay && this.play();
      };
  
      /**
       * 璁剧疆缁勪欢鍙傛暟
       */
      self.setOptions = function (options) {
        this.settings = $.extend(true, {}, defaults, options);
        var settings = this.settings,
          start = settings.start,
          end = settings.end;
  
        $element.css({marginTop: '0px', marginLeft: '0px', position: 'fixed'}).appendTo('body');
        // 杩愬姩杩囩▼涓湁鏀瑰彉澶у皬
        if (end.width != null && end.height != null) {
          $.extend(true, start, {
            width: $element.width(),
            height: $element.height()
          });
        }
        // 杩愬姩杞ㄨ抗鏈€楂樼偣top鍊�
        var vertex_top = Math.min(start.top, end.top) - Math.abs(start.left - end.left) / 3;
        if (vertex_top < settings.vertex_Rtop) {
          // 鍙兘鍑虹幇璧风偣鎴栬€呯粓鐐瑰氨鏄繍鍔ㄦ洸绾块《鐐圭殑鎯呭喌
          vertex_top = Math.min(settings.vertex_Rtop, Math.min(start.top, end.top));
        }
  
        /**
         * 杩愬姩杞ㄨ抗鍦ㄩ〉闈腑鐨則op鍊煎彲浠ユ娊璞℃垚鍑芥暟 y = a * x*x + b;
         * a = curvature
         * b = vertex_top
         */
  
        var distance = Math.sqrt(Math.pow(start.top - end.top, 2) + Math.pow(start.left - end.left, 2)),
          // 鍏冪礌绉诲姩娆℃暟
          steps = Math.ceil(Math.min(Math.max(Math.log(distance) / 0.05 - 75, 30), 100) / settings.speed),
          ratio = start.top == vertex_top ? 0 : -Math.sqrt((end.top - vertex_top) / (start.top - vertex_top)),
          vertex_left = (ratio * start.left - end.left) / (ratio - 1),
          // 鐗规畩鎯呭喌锛屽嚭鐜伴《鐐筶eft==缁堢偣left锛屽皢鏇茬巼璁剧疆涓�0锛屽仛鐩寸嚎杩愬姩銆�
          curvature = end.left == vertex_left ? 0 : (end.top - vertex_top) / Math.pow(end.left - vertex_left, 2);
  
        $.extend(true, settings, {
          count: -1, // 姣忔閲嶇疆涓�-1
          steps: steps,
          vertex_left: vertex_left,
          vertex_top: vertex_top,
          curvature: curvature
        });
      };
  
      /**
       * 寮€濮嬭繍鍔紝鍙嚜宸辫皟鐢�
       */
      self.play = function () {
        this.move();
      };
  
      /**
       * 鎸塻tep杩愬姩
       */
      self.move = function () {
        var settings = this.settings,
          start = settings.start,
          count = settings.count,
          steps = settings.steps,
          end = settings.end;
        // 璁＄畻left top鍊�
        var left = start.left + (end.left - start.left) * count / steps,
          top = settings.curvature == 0 ? start.top + (end.top - start.top) * count / steps : settings.curvature * Math.pow(left - settings.vertex_left, 2) + settings.vertex_top;
        // 杩愬姩杩囩▼涓湁鏀瑰彉澶у皬
        if (end.width != null && end.height != null) {
          var i = steps / 2,
            width = end.width - (end.width - start.width) * Math.cos(count < i ? 0 : (count - i) / (steps - i) * Math.PI / 2),
            height = end.height - (end.height - start.height) * Math.cos(count < i ? 0 : (count - i) / (steps - i) * Math.PI / 2);
          $element.css({width: width + "px", height: height + "px", "font-size": Math.min(width, height) + "px"});
        }
        $element.css({
          left: left + "px",
          top: top + "px"
        });
        settings.count++;
        // 瀹氭椂浠诲姟
        var time = window.requestAnimationFrame($.proxy(this.move, this));
        if (count == steps) {
          window.cancelAnimationFrame(time);
          // fire callback
          settings.onEnd.apply(this);
        }
      };
  
      /**
       * 閿€姣�
       */
      self.destory = function(){
        $element.remove();
      };
  
      self.init(options);
    };
  
    // add the plugin to the jQuery.fn object
    $.fn.fly = function (options) {
      return this.each(function () {
        if (undefined == $(this).data('fly')) {
          $(this).data('fly', new $.fly(this, options));
        }
      });
    };
  })(jQuery);